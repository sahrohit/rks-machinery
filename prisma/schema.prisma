// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    ActivityLog   ActivityLog[]
}

model ActivityLog {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    type      String
    desc      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Newsletter {
    id        String   @id @default(cuid())
    email     String?  @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Admin {
    id        String   @id @default(cuid())
    email     String?  @unique
    access    Boolean?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model Category {
    id        String    @id @default(cuid())
    name      String    @unique
    desc      String?
    slug      String    @unique
    image     String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    products  Product[]
}

model Product {
    id         String           @id @default(cuid())
    name       String?          @unique
    slug       String?          @unique
    price      Float?
    desc       String?
    images     ProductImage[]
    features   ProductFeature[]
    categoryId String?
    category   Category?        @relation(fields: [categoryId], references: [id])
    keywords   String?
    createdAt  DateTime         @default(now())
    updatedAt  DateTime         @updatedAt
}

model ProductImage {
    id        String   @id @default(cuid())
    url       String?
    product   Product? @relation(fields: [productId], references: [id])
    productId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductFeature {
    id          String   @id @default(cuid())
    title       String?
    description String?
    product     Product? @relation(fields: [productId], references: [id])
    productId   String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
